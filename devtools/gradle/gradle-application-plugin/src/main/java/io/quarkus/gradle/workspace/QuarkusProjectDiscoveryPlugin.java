/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.quarkus.gradle.workspace;

import javax.inject.Inject;

import org.gradle.api.Action;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.type.ArtifactTypeDefinition;
import org.gradle.api.attributes.*;
import org.gradle.api.execution.TaskExecutionGraph;
import org.gradle.api.execution.TaskExecutionGraphListener;
import org.gradle.api.provider.Provider;
import org.gradle.api.provider.SetProperty;
import org.gradle.api.tasks.TaskProvider;
import org.gradle.build.event.BuildEventsListenerRegistry;
import org.jetbrains.annotations.NotNull;

import io.quarkus.gradle.workspace.descriptors.DefaultProjectDescriptor;
import io.quarkus.gradle.workspace.descriptors.ProjectDescriptorBuilder;

/**
 * A plugin that discovers setup discovery artifacts in a multi-project build.
 */
public abstract class QuarkusProjectDiscoveryPlugin implements Plugin<Project> {

    public static final String QUARKUS_PROJECT_DESCRIPTOR_ARTIFACT_TYPE = "quarkus-project-descriptor";

    @Inject
    public abstract BuildEventsListenerRegistry getEventsListenerRegistry();

    @Override
    @SuppressWarnings("Convert2Lambda")
    public void apply(Project project) {
        Provider<TaskExecutionListenerService> serviceProvider = project.getGradle().getSharedServices()
                .registerIfAbsent("myExecutionListener", TaskExecutionListenerService.class, spec -> {
                });
        getEventsListenerRegistry().onTaskCompletion(serviceProvider);
        SetProperty<String> taskNames = project.getObjects().setProperty(String.class);
        project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
            @Override
            public void graphPopulated(TaskExecutionGraph graph) {
                graph.getAllTasks().stream().filter(task -> task.getProject() == project).map(Task::getName)
                        .forEach(taskNames::add);
            }
        });
        Provider<DefaultProjectDescriptor> projectDescriptorProvider = ProjectDescriptorBuilder.buildForDependency(project);
        // Run in after evaluate so we discover project after build file was run
        project.afterEvaluate(new Action<>() {
            @Override
            public void execute(@NotNull Project project) {
                project.getPluginManager().withPlugin("java-base", appliedPlugin -> {
                    if (project.getPluginManager().hasPlugin("java-gradle-plugin")) {
                        // Do not discover project if it is a Gradle plugin
                        return;
                    }
                    setupProjectDiscovery(project, projectDescriptorProvider);
                });
            }
        });
    }

    private void createConfiguration(Project project, TaskProvider<QuarkusDiscoveryTask> discoveryTask) {
        Configuration configuration = project.getConfigurations().create("quarkusProjectDiscoveryConfiguration");
        configuration.setCanBeResolved(true);
        //noinspection Convert2Lambda
        configuration.attributes(new Action<>() {
            @Override
            public void execute(AttributeContainer attributeContainer) {
                attributeContainer.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE,
                        QUARKUS_PROJECT_DESCRIPTOR_ARTIFACT_TYPE);
            }
        });
        project.getArtifacts().add(configuration.getName(), discoveryTask);
    }

    private void setupProjectDiscovery(Project project, Provider<DefaultProjectDescriptor> projectDescriptorProvider) {
        TaskProvider<QuarkusDiscoveryTask> discoveryTask = registerProjectDiscoveryTask(project, projectDescriptorProvider);
        createConfiguration(project, discoveryTask);
    }

    @SuppressWarnings("Convert2Lambda")
    private TaskProvider<QuarkusDiscoveryTask> registerProjectDiscoveryTask(Project project,
            Provider<DefaultProjectDescriptor> projectDescriptor) {
        return project.getTasks().register("quarkusDiscoveryTask", QuarkusDiscoveryTask.class, new Action<>() {
            @Override
            public void execute(@NotNull QuarkusDiscoveryTask myDiscoveryTask) {
                myDiscoveryTask.getProjectDescriptor().set(projectDescriptor);
                myDiscoveryTask.getProjectDescriptorOutput()
                        .set(project.getLayout().getBuildDirectory().file("quarkus/discovery/project.descriptor"));
            }
        });
    }
}
